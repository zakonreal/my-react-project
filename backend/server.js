// server.js
import express from 'express';
import fs from 'fs/promises';
import path from 'path';
import cors from 'cors';
import cookieParser from 'cookie-parser';
import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';
import { fileURLToPath } from 'url';
import { dirname } from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const app = express();
const isProduction = process.env.NODE_ENV === 'production';
const PORT = process.env.PORT || 5000;
const JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key';

// –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
const POSTS_FILE = path.join(__dirname, './db/db.posts.json');
const COMMENTS_FILE = path.join(__dirname, './db/db.comments.json');
const PHOTOS_FILE = path.join(__dirname, './db/db.photos.json');
const USERS_FILE = path.join(__dirname, './db/db.users.json');

// Middleware
app.use(cors({
    origin: isProduction
        ? ['https://your-app.up.railway.app', 'https://your-app.onrender.com']
        : 'http://localhost:5173',
    credentials: true
}));
app.use(express.json());
app.use(cookieParser());

// –°—Ç–∞—Ç–∏–∫–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—Ç–¥–∞–≤–∞—Ç—å —Ñ—Ä–æ–Ω—Ç)
app.use(express.static(path.join(__dirname, 'my-blog/build')));

// –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏–∫–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
app.use(express.static(path.join(__dirname, '../dist')));

// –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
app.get('*', (req, res) => {
    res.sendFile(path.join(__dirname, '../dist/index.html'));
});

app.listen(PORT, '0.0.0.0', () => {
    console.log(`üöÄ Server running on port ${PORT}`);
});

// –£—Ç–∏–ª–∏—Ç–∞: —á—Ç–µ–Ω–∏–µ JSON
async function readJSON(filePath) {
    try {
        const data = await fs.readFile(filePath, 'utf8');
        return JSON.parse(data);
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', err);
        throw new Error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
    }
}

// –£—Ç–∏–ª–∏—Ç–∞: –∑–∞–ø–∏—Å—å JSON
async function writeJSON(filePath, data) {
    try {
        await fs.writeFile(filePath, JSON.stringify(data, null, 2), 'utf8');
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞:', err);
        throw new Error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
    }
}

// Middleware –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
const authMiddleware = (req, res, next) => {
    const token = req.cookies.token;
    if (!token) {
        return res.status(401).json({ error: '–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞, –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        return res.status(403).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç—ë–∫—à–∏–π —Ç–æ–∫–µ–Ω' });
    }
};

// Middleware –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
const adminMiddleware = (req, res, next) => {
    if (req.user && req.user.isAdmin) {
        next();
    } else {
        res.status(403).json({ error: '–¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' });
    }
};

// –ü–∞–≥–∏–Ω–∞—Ü–∏—è
function paginate(data, page, limit) {
    const startIndex = (page - 1) * limit;
    const endIndex = page * limit;
    const result = {};
    if (endIndex < data.length) {
        result.next = { page: page + 1, limit };
    }
    if (startIndex > 0) {
        result.previous = { page: page - 1, limit };
    }
    result.data = data.slice(startIndex, endIndex);
    return result;
}

// === –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø ===

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
app.post('/api/auth/register', async (req, res) => {
    try {
        const { username, password, isAdmin = false } = req.body;

        if (!username || !password) {
            return res.status(400).json({ error: 'Username –∏ password –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
        }

        const { users } = await readJSON(USERS_FILE);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        const existingUser = users.find(u => u.username === username);
        if (existingUser) {
            return res.status(400).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
        }

        // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
        const hashedPassword = await bcrypt.hash(password, 10);

        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const newUser = {
            id: users.length > 0 ? Math.max(...users.map(u => u.id)) + 1 : 1,
            username,
            password: hashedPassword,
            isAdmin
        };

        users.push(newUser);
        await writeJSON(USERS_FILE, { users });

        // –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω
        const token = jwt.sign(
            { userId: newUser.id, username: newUser.username, isAdmin: newUser.isAdmin },
            JWT_SECRET,
            { expiresIn: '24h' }
        );

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω –≤ cookie
        res.cookie('token', token, {
            httpOnly: true,
            maxAge: 24 * 60 * 60 * 1000, // 24 —á–∞—Å–∞
            sameSite: 'strict'
        });

        res.status(201).json({
            message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ',
            user: { id: newUser.id, username: newUser.username, isAdmin: newUser.isAdmin }
        });
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

// –í—Ö–æ–¥
app.post('/api/auth/login', async (req, res) => {
    try {
        const { username, password } = req.body;

        if (!username || !password) {
            return res.status(400).json({ error: 'Username –∏ password –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
        }

        const { users } = await readJSON(USERS_FILE);

        // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = users.find(u => u.username === username);
        if (!user) {
            return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
        const isPasswordValid = await bcrypt.compare(password, user.password);
        if (!isPasswordValid) {
            return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' });
        }

        // –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω
        const token = jwt.sign(
            { userId: user.id, username: user.username, isAdmin: user.isAdmin },
            JWT_SECRET,
            { expiresIn: '24h' }
        );

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω –≤ cookie
        res.cookie('token', token, {
            httpOnly: true,
            maxAge: 24 * 60 * 60 * 1000, // 24 —á–∞—Å–∞
            sameSite: 'strict'
        });

        res.json({
            message: '–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ',
            user: { id: user.id, username: user.username, isAdmin: user.isAdmin }
        });
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

// –í—ã—Ö–æ–¥
app.post('/api/auth/logout', (req, res) => {
    res.clearCookie('token');
    res.json({ message: '–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ' });
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
app.get('/api/auth/me', authMiddleware, (req, res) => {
    res.json({ user: req.user });
});

// === POSTS ===

app.get('/api/posts', async (req, res) => {
    try {
        const { page = 1, limit = 10 } = req.query;
        const pageNum = parseInt(page);
        const limitNum = parseInt(limit);

        const { posts } = await readJSON(POSTS_FILE);
        const paginated = paginate(posts, pageNum, limitNum);

        res.json(paginated);
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

app.get('/api/posts/:id', async (req, res) => {
    try {
        const id = parseInt(req.params.id);
        const { posts } = await readJSON(POSTS_FILE);
        const post = posts.find(p => p.id === id);
        if (!post) return res.status(404).json({ error: '–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        res.json(post);
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

app.post('/api/posts', authMiddleware, async (req, res) => {
    const { title, body, url, rate } = req.body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!title || !body || !url || rate === undefined) {
        return res.status(400).json({ error: '–ü–æ–ª—è title, body, url –∏ rate –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã.' });
    }
    if (typeof title !== 'string' || title.length < 1 || title.length > 50) {
        return res.status(400).json({ error: '–ü–æ–ª–µ title ‚Äî —Å—Ç—Ä–æ–∫–∞ –æ—Ç 1 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤.' });
    }
    if (typeof body !== 'string' || body.length < 1 || body.length > 1000) {
        return res.status(400).json({ error: '–ü–æ–ª–µ body ‚Äî —Å—Ç—Ä–æ–∫–∞ –æ—Ç 1 –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤.' });
    }
    if (typeof url !== 'string' || !url.startsWith('http')) {
        return res.status(400).json({ error: 'URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http.' });
    }
    if (!Number.isInteger(rate) || rate < 1 || rate > 10) {
        return res.status(400).json({ error: 'Rate ‚Äî —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10.' });
    }

    try {
        const { posts } = await readJSON(POSTS_FILE);
        const newPost = {
            id: posts.length ? Math.max(...posts.map(p => p.id)) + 1 : 1,
            title,
            body,
            url,
            rate,
            userId: req.user.userId // –î–æ–±–∞–≤–ª—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        };
        posts.push(newPost);
        await writeJSON(POSTS_FILE, { posts });
        res.status(201).json(newPost);
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

app.put('/api/posts/:id', authMiddleware, async (req, res) => {
    const id = parseInt(req.params.id);
    const { title, body, url, rate } = req.body;

    try {
        const { posts } = await readJSON(POSTS_FILE);
        const index = posts.findIndex(p => p.id === id);
        if (index === -1) return res.status(404).json({ error: '–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–æ–º –ø–æ—Å—Ç–∞ –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if (posts[index].userId !== req.user.userId && !req.user.isAdmin) {
            return res.status(403).json({ error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è' });
        }

        posts[index] = { ...posts[index], title, body, url, rate };
        await writeJSON(POSTS_FILE, { posts });
        res.json(posts[index]);
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

app.delete('/api/posts/:id', authMiddleware, async (req, res) => {
    const id = parseInt(req.params.id);
    try {
        const { posts } = await readJSON(POSTS_FILE);
        const post = posts.find(p => p.id === id);

        if (!post) return res.status(404).json({ error: '–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–æ–º –ø–æ—Å—Ç–∞ –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if (post.userId !== req.user.userId && !req.user.isAdmin) {
            return res.status(403).json({ error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è' });
        }

        const updated = posts.filter(p => p.id !== id);
        await writeJSON(POSTS_FILE, { posts: updated });
        res.status(204).send();
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

// === SEARCH ===

app.get('/api/posts-search', async (req, res) => {
    const { term, page = 1, limit = 10 } = req.query;
    if (!term) return res.status(400).json({ error: '–ü–∞—Ä–∞–º–µ—Ç—Ä term –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });

    try {
        const { posts } = await readJSON(POSTS_FILE);
        const filtered = posts.filter(p =>
            p.title.toLowerCase().includes(term.toLowerCase()) ||
            p.body.toLowerCase().includes(term.toLowerCase())
        );
        const paginated = paginate(filtered, parseInt(page), parseInt(limit));
        res.json(paginated);
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

// === COMMENTS ===

app.get('/api/posts/:postId/comments', async (req, res) => {
    const postId = parseInt(req.params.postId);
    try {
        const { comments } = await readJSON(COMMENTS_FILE);
        res.json(comments.filter(c => c.postId === postId));
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

app.post('/api/posts/:postId/comments', authMiddleware, async (req, res) => {
    const { title, rate, body } = req.body;
    const postId = parseInt(req.params.postId);

    if (!Number.isInteger(rate) || rate < 1 || rate > 10) {
        return res.status(400).json({ error: 'Rate ‚Äî —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10.' });
    }
    if (typeof title !== 'string' || title.length > 30) {
        return res.status(400).json({ error: 'Title ‚Äî –Ω–µ –±–æ–ª–µ–µ 30 —Å–∏–º–≤–æ–ª–æ–≤.' });
    }
    if (typeof body !== 'string' || body.length > 500) {
        return res.status(400).json({ error: 'Body ‚Äî –Ω–µ –±–æ–ª–µ–µ 500 —Å–∏–º–≤–æ–ª–æ–≤.' });
    }

    try {
        const { comments } = await readJSON(COMMENTS_FILE);
        const newComment = {
            id: Date.now(),
            postId,
            title,
            rate,
            body,
            userId: req.user.userId // –î–æ–±–∞–≤–ª—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        };
        comments.push(newComment);
        await writeJSON(COMMENTS_FILE, { comments });
        res.status(201).json(newComment);
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

// === PHOTOS ===

app.get('/api/photos', async (req, res) => {
    try {
        const { photos } = await readJSON(PHOTOS_FILE);
        res.json(photos);
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

app.post('/api/photos', authMiddleware, async (req, res) => {
    const { title, url, albumId } = req.body;
    if (!title || !url || !albumId) {
        return res.status(400).json({ error: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }
    if (!url.startsWith('http')) {
        return res.status(400).json({ error: 'URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http' });
    }

    try {
        const { photos } = await readJSON(PHOTOS_FILE);
        const newId = photos.length ? Math.max(...photos.map(p => p.id)) + 1 : 1;
        const photo = { id: newId, title, url, albumId, userId: req.user.userId };
        photos.push(photo);
        await writeJSON(PHOTOS_FILE, { photos });
        res.status(201).json(photo);
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

app.delete('/api/photos/:id', authMiddleware, adminMiddleware, async (req, res) => {
    const id = parseInt(req.params.id);
    try {
        const { photos } = await readJSON(PHOTOS_FILE);
        const photo = photos.find(p => p.id === id);

        if (!photo) return res.status(404).json({ error: '–§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–æ–º —Ñ–æ—Ç–æ –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if (photo.userId !== req.user.userId && !req.user.isAdmin) {
            return res.status(403).json({ error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è' });
        }

        const updated = photos.filter(p => p.id !== id);
        await writeJSON(PHOTOS_FILE, { photos: updated });
        res.status(204).send();
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

app.listen(PORT, () => {
    console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
});